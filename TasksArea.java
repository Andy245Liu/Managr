/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package managr;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.DateTime;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 * Class for the Tasks area window Swing GUI
 * 
 * @author Andy
 * @since JDK 7u80
 * @version 7.0
 */
public class TasksArea extends javax.swing.JFrame{
    /**
     * static variable creating a new instance of TaskList
     */
    static TaskList myList = new TaskList(); //see TaskController for the taskList modifications
    /**
     * Creates new form TasksArea
     */
    
    public TasksArea() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addTask = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        taskNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        taskSubjectField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        taskTypeSetter = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        dueDatePicker = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        dueHourPicker = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        dueMinutePicker = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        importanceSetter = new javax.swing.JSlider();
        defaultButton = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        finalizeButton = new javax.swing.JButton();
        deleteTask = new javax.swing.JDialog();
        taskNameDeleted = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        submitDeleteButton = new javax.swing.JButton();
        searchTask = new javax.swing.JDialog();
        taskSearchBox = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        clearTasks = new javax.swing.JDialog();
        jLabel16 = new javax.swing.JLabel();
        clearWeekButton = new javax.swing.JButton();
        clearPastMonth = new javax.swing.JButton();
        clearHistory = new javax.swing.JButton();
        clearPastYear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskListDisplay = new javax.swing.JTextPane();
        returnButton = new javax.swing.JButton();
        addTaskButton = new javax.swing.JButton();
        priorityListButton = new javax.swing.JButton();
        sortDatesButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchWindowButton = new javax.swing.JButton();
        clearPastButton = new javax.swing.JButton();

        addTask.setMinimumSize(new java.awt.Dimension(800, 500));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Add Task");

        jLabel3.setText("Task Name:");

        jLabel5.setText("Subject:");

        jLabel4.setText("Task Type:");

        taskTypeSetter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exam", "Test", "Quest", "Quiz", "Culminating", "Project", "Assignment", "Regular Homework" }));

        jLabel6.setText("Due Date:");

        jLabel7.setText("Due Hour (24 hr clock):");

        dueHourPicker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "00", "01", "02", "03", "04", "05" }));

        jLabel8.setText("Due Minute:");

        dueMinutePicker.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "15", "30", "45" }));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("On a scale of 1-10, how important is this assignment to you? ");

        jLabel10.setText("You may either use the slider below, or click the button to use the default importance setting if you are not sure.");

        importanceSetter.setMajorTickSpacing(1);
        importanceSetter.setMaximum(10);
        importanceSetter.setPaintLabels(true);
        importanceSetter.setPaintTicks(true);

        defaultButton.setText("Use Default Importance Settings");

        jLabel11.setText("OR");

        finalizeButton.setText("Add Task");
        finalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addTaskLayout = new javax.swing.GroupLayout(addTask.getContentPane());
        addTask.getContentPane().setLayout(addTaskLayout);
        addTaskLayout.setHorizontalGroup(
            addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(importanceSetter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(defaultButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTaskLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(finalizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
            .addGroup(addTaskLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTaskLayout.createSequentialGroup()
                        .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(addTaskLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(29, 29, 29)
                                .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))
                            .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)))
                        .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addTaskLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(dueHourPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dueMinutePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addTaskLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(taskTypeSetter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taskNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taskSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))))
                    .addComponent(jLabel10))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTaskLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(154, 154, 154))
        );
        addTaskLayout.setVerticalGroup(
            addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTaskLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskSubjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(taskTypeSetter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dueMinutePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(dueHourPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel6))
                    .addGroup(addTaskLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(dueDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(26, 26, 26)
                .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importanceSetter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addTaskLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(addTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(defaultButton)
                            .addComponent(jLabel11))))
                .addGap(18, 18, 18)
                .addComponent(finalizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        deleteTask.setMinimumSize(new java.awt.Dimension(734, 458));

        taskNameDeleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskNameDeletedActionPerformed(evt);
            }
        });

        jLabel12.setText("Delete a Task");

        jLabel13.setText("Enter the name of the task you would like to delete:");

        submitDeleteButton.setText("Delete this task");
        submitDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitDeleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deleteTaskLayout = new javax.swing.GroupLayout(deleteTask.getContentPane());
        deleteTask.getContentPane().setLayout(deleteTaskLayout);
        deleteTaskLayout.setHorizontalGroup(
            deleteTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTaskLayout.createSequentialGroup()
                .addContainerGap(105, Short.MAX_VALUE)
                .addGroup(deleteTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteTaskLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(267, 267, 267))
                    .addGroup(deleteTaskLayout.createSequentialGroup()
                        .addGroup(deleteTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(deleteTaskLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(taskNameDeleted, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(deleteTaskLayout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(submitDeleteButton)))
                        .addContainerGap(115, Short.MAX_VALUE))))
        );
        deleteTaskLayout.setVerticalGroup(
            deleteTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteTaskLayout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(deleteTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskNameDeleted, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(80, 80, 80)
                .addComponent(submitDeleteButton)
                .addContainerGap(173, Short.MAX_VALUE))
        );

        searchTask.setMinimumSize(new java.awt.Dimension(742, 504));

        taskSearchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskSearchBoxActionPerformed(evt);
            }
        });

        jLabel14.setText("Search the name of the task you would like to view: ");

        jLabel15.setText("Search for Info About a Task");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchTaskLayout = new javax.swing.GroupLayout(searchTask.getContentPane());
        searchTask.getContentPane().setLayout(searchTaskLayout);
        searchTaskLayout.setHorizontalGroup(
            searchTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchTaskLayout.createSequentialGroup()
                .addGroup(searchTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchTaskLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(searchTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(taskSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(searchTaskLayout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(searchButton)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        searchTaskLayout.setVerticalGroup(
            searchTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchTaskLayout.createSequentialGroup()
                .addContainerGap(123, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(65, 65, 65)
                .addGroup(searchTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(78, 78, 78)
                .addComponent(searchButton)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        clearTasks.setMinimumSize(new java.awt.Dimension(675, 466));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("Clear Past Tasks");

        clearWeekButton.setText("Clear Tasks Beyond 7 Days");
        clearWeekButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearWeekButtonActionPerformed(evt);
            }
        });

        clearPastMonth.setText("Clear Tasks Beyond 30 Days");
        clearPastMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPastMonthActionPerformed(evt);
            }
        });

        clearHistory.setText("Clear ALL Previous Tasks");
        clearHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHistoryActionPerformed(evt);
            }
        });

        clearPastYear.setText("Clear Tasks Beyond 365 Days");
        clearPastYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPastYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clearTasksLayout = new javax.swing.GroupLayout(clearTasks.getContentPane());
        clearTasks.getContentPane().setLayout(clearTasksLayout);
        clearTasksLayout.setHorizontalGroup(
            clearTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clearTasksLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(clearTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clearPastYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearPastMonth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearWeekButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clearTasksLayout.createSequentialGroup()
                .addContainerGap(281, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(210, 210, 210))
        );
        clearTasksLayout.setVerticalGroup(
            clearTasksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clearTasksLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(clearWeekButton)
                .addGap(57, 57, 57)
                .addComponent(clearPastMonth)
                .addGap(46, 46, 46)
                .addComponent(clearPastYear)
                .addGap(60, 60, 60)
                .addComponent(clearHistory)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Your Task List");

        jScrollPane1.setViewportView(taskListDisplay);

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        addTaskButton.setText("Add Task");
        addTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTaskButtonActionPerformed(evt);
            }
        });

        priorityListButton.setText("View Task Priority List");
        priorityListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityListButtonActionPerformed(evt);
            }
        });

        sortDatesButton.setText("Sort Tasks By Due Date");
        sortDatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortDatesButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Task");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchWindowButton.setText("Search Tasks");
        searchWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchWindowButtonActionPerformed(evt);
            }
        });

        clearPastButton.setText("Clear Past Tasks");
        clearPastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addTaskButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priorityListButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortDatesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(searchWindowButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearPastButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnButton)
                    .addComponent(addTaskButton)
                    .addComponent(priorityListButton)
                    .addComponent(sortDatesButton)
                    .addComponent(deleteButton)
                    .addComponent(searchWindowButton)
                    .addComponent(clearPastButton))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
   
    
    
    /**
     * Method to define the functionality of the addTask button (shows the dialogue box that allows the user to add task).
     * 
     * @param evt when the add task button is clicked
     */
    private void addTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTaskButtonActionPerformed
        // TODO add your handling code here:
      
       
      addTask.setVisible(true);
        
        
        
    }//GEN-LAST:event_addTaskButtonActionPerformed
/**
 * Button to return home when it is clicked
 * @param evt when the return button is clicked
 */
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // TODO add your handling code here:
         HomeScreen home = new HomeScreen(); 
        //display home screen and closes the current screen
         home.setVisible(true);
         this.setVisible(false);
    }//GEN-LAST:event_returnButtonActionPerformed
    /**
     * Method that clears all fields in the addTask dialogue box
     */
    private void clearAll(){
        taskNameField.setText(null);
        taskSubjectField.setText(null);
        dueDatePicker.setDate(null);
        taskTypeSetter.setSelectedItem("Exam");
        dueHourPicker.setSelectedItem("06");
        dueMinutePicker.setSelectedItem("00");
        importanceSetter.setValue(10);
        defaultButton.setSelected(false);        
    }
    /**
     * Method to check if all fields in the addTask dialogue box are filled out.
     * @return a boolean representing whether or not the dialogue box form was completely filled in.
     */
    private boolean isDone(){
        
        boolean noDate = dueDatePicker.getDate() == null ;
        boolean noName = taskNameField.getText().equals("");
        boolean noSubject = taskSubjectField.getText().equals("");
       
          
        boolean total = !( noName || noSubject || noDate );
            
        return total;
            
    
    }
  
    /**
     * Method to give functionality to the Add Task button of the dialogue box. 
     * Adds the user-inputted task to the user's task list.
     * 
     * @param evt when the button to submit the task is clicked
     */
    private void finalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeButtonActionPerformed
        // TODO add your handling code here:
       
         //get current user
        User currentUser = UserManagement.getUser();
        
        
       TaskList currentTaskList = UserManagement.currentTaskList();
       
        TaskAreaController controller = new TaskAreaController(currentUser,this);
        
        boolean complete = isDone();
        
        //checks is task namd and subject are within length limit of 20 characters max
        if(taskNameField.getText().length() > 20 || taskSubjectField.getText().length() > 20){
            JOptionPane.showMessageDialog(addTask, "Your taks name and subject must be under 20 characters long", "Error", JOptionPane.ERROR_MESSAGE);
        }
        //checks if the addTask fields are all filled in
        else if (complete == false){
             JOptionPane.showMessageDialog(addTask, "You must completely fill in the form", "Error", JOptionPane.ERROR_MESSAGE);
        //checks if a Task with the specified name already exists
        } else if (controller.nameExist(taskNameField.getText())){
            
            JOptionPane.showMessageDialog(addTask, "A task with this name already exists. Please give your task a unique name.", "Error", JOptionPane.ERROR_MESSAGE);
            
        }
        //if all other conditions are passed, then add the Task
        else {
            String name = taskNameField.getText();
            String subject = taskSubjectField.getText();
            Date dueDate = dueDatePicker.getDate();
            int dueHour = Integer.parseInt((String)dueHourPicker.getSelectedItem());
            int dueMin = Integer.parseInt((String)dueMinutePicker.getSelectedItem());
            
            controller.addTask();
            controller.storeTask();
            
            
           
             clearAll();
             addTask.dispose();
             System.out.println(currentTaskList.length());
             String tasks = TaskAreaController.printList(currentTaskList);
          
             taskListDisplay.setText(tasks);
             
             
        
        
       }
      
        
        
    }//GEN-LAST:event_finalizeButtonActionPerformed

    /**
     * Prints the sorted priorities list to display
     * @param evt priorities list button pressed
     */
    private void priorityListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityListButtonActionPerformed
        // TODO add your handling code here:
        
        
       //create instance of TaskArea controller
        TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        
        //call function to sort TaskList by priority index (weighted importance * 1/time to deadline)
        ArrayList prioritiesList = myCon.sortByPriority();
        TaskList list = new TaskList(prioritiesList);
         
        //displays the sorted Task List
        String tasks = TaskAreaController.printList(list);
          
         taskListDisplay.setText(tasks);
        
        //3 sorting algorithms
         
        //TaskAreaController.bubble();
        //TaskAreaController.insertion();
       //TaskAreaController.regularSort();

    }//GEN-LAST:event_priorityListButtonActionPerformed

    /**
     * Sorts task list by due date
     * @param evt when the sort tasks by due date button is pressed
     */
    private void sortDatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortDatesButtonActionPerformed
        // TODO add your handling code here:
        
        //create new instance of Task Area controller 
        TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        
        //get sorted ArrayList
        ArrayList datesList = myCon.sortByDate();
        TaskList datesSorted = new TaskList(datesList);
        String tasks = TaskAreaController.printList(datesSorted);
          
        //display ArrayList sorted by due date
         taskListDisplay.setText(tasks);
    }//GEN-LAST:event_sortDatesButtonActionPerformed
    //Unused prewritten method
    private void taskNameDeletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskNameDeletedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskNameDeletedActionPerformed
    /**
     * Displays the delete task window
     * @param evt the delete task button is pressed on the main Tasks Area window
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        deleteTask.setVisible(true);
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Searches for a task and deletes it from the TaskList and database
     * @param evt the delete task button is pressed
     */
    private void submitDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitDeleteButtonActionPerformed
        // TODO add your handling code here:
        
         
        TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        myCon.linearSearch();
        taskNameDeleted.setText(null);
        deleteTask.setVisible(false);
    }//GEN-LAST:event_submitDeleteButtonActionPerformed
    //unused prewritten method
    private void taskSearchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskSearchBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_taskSearchBoxActionPerformed

        /**
         * searches for the task and displays its information
         * @param evt search task button pressed
         */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        
        //controller instantiated
        TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        //search for task by name
        Task currentTask = myCon.binarySearch();
        //Task currentTask = myCon.linear();
        
        //if task found, display its information, resets all text fields in the search dialogue box
        if (currentTask != null){
            String display = "Task Name: "+currentTask.getName() + "\n" + "Type: "+ currentTask.getTaskType()+"\n"+"Subject: "+ currentTask.getSubject() + "\n"+ "Due Date: " + currentTask.getDueDate()+"\n"+"Rated Task Importance (out of 10): "+ currentTask.getImportance();
            taskListDisplay.setText(display);
            taskSearchBox.setText(null);
            searchTask.setVisible(false);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Displays the window to search for a task
     * @param evt clicking the search task button
     */
    private void searchWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchWindowButtonActionPerformed
        // TODO add your handling code here:
        searchTask.setVisible(true);
         //TaskAreaController myCon = new TaskAreaController(HomeScreen.myUser, this);
         //double myDouble = myCon.binaryTest(3.1415926);
        //double myDouble = myCon.linearTest(3.1415926);
         //System.out.println(myDouble);
    }//GEN-LAST:event_searchWindowButtonActionPerformed
    /**
     * Method to clear tasks beyond a week when the clear week button is clicked
     * @param evt clear week button pressed
     */
    private void clearWeekButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearWeekButtonActionPerformed
        // TODO add your handling code here:
        
        
         TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        try {
            int input = JOptionPane.showConfirmDialog(clearTasks, "Are you sure you want to delete all tasks beyond 7 days?");
            if(input == 0){
            myCon.clearPastTasks(7);
            clearTasks.setVisible(false);
            }
        } catch (ParseException ex) {
            Logger.getLogger(TasksArea.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearWeekButtonActionPerformed

    /**
     * displays the clear tasks dialogue box when user hits the clear tasks button
     * @param evt clear past tasks button clicked
     */
    private void clearPastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPastButtonActionPerformed
        // TODO add your handling code here:
        clearTasks.setVisible(true);
    }//GEN-LAST:event_clearPastButtonActionPerformed
    
    /**
     * Clears all past tasks when the clear history button is clicked
     * @param evt the clear history button is clicked
     */
    private void clearHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryActionPerformed
        // TODO add your handling code here:
         
         
          TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        try {
            int input = JOptionPane.showConfirmDialog(clearTasks, "Are you sure you want to delete ALL past tasks?");
            if(input == 0){
            myCon.clearPastTasks(0);
            clearTasks.setVisible(false);
            }
        } catch (ParseException ex) {
            Logger.getLogger(TasksArea.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearHistoryActionPerformed
    
    /**
     * Method to respond the the clear month button being pressed by clearing tasks beyond 30 days old
     * @param evt the clear month button clicked
     */
    private void clearPastMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPastMonthActionPerformed
        // TODO add your handling code here:
         
         
          TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        try {
            int input = JOptionPane.showConfirmDialog(clearTasks, "Are you sure you want to delete all tasks beyond 30 days?");
            if(input == 0){
            myCon.clearPastTasks(30);
            clearTasks.setVisible(false);
            }
        } catch (ParseException ex) {
            Logger.getLogger(TasksArea.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearPastMonthActionPerformed
    
    /**
     * Method to clear tasks beyond 365 days when the clear past year button is clicked
     * @param evt the clear past year button is clicked
     */
    private void clearPastYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPastYearActionPerformed
        // TODO add your handling code here:
          
         
           TaskAreaController myCon = new TaskAreaController(UserManagement.getUser(), this);
        try {
            int input = JOptionPane.showConfirmDialog(clearTasks, "Are you sure you want to delete all tasks beyond 365 days?");
            if(input == 0){
            myCon.clearPastTasks(365);
            clearTasks.setVisible(false);
            }
        } catch (ParseException ex) {
            Logger.getLogger(TasksArea.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearPastYearActionPerformed

    



    /**
     * Main method for the Tasks Area
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TasksArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TasksArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TasksArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TasksArea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TasksArea().setVisible(true);
                
            }
        });
        
    }
    
    
     /**
     * Gets string of the name of the task user wishes to look up
     * 
     * @return String name of the desired task to be looked up
     */
    public String getSearchedTaskName(){
         return taskSearchBox.getText();
    }
    
    
    /**
     * Gets the string of the name of the task user wishes to delete
     * 
     * @return String name of the desired task to be deleted 
     */
    public String getDeleteTaskName(){
         return taskNameDeleted.getText();
    }
    
    /**
     * To access the task name
     * @return String of name
     */
    public String getTaskName(){
        return taskNameField.getText();
    }
    /**
     * To access the task subject
     * @return String of subject
     */
    public String getTaskSubject(){
        return taskSubjectField.getText();
    
    }
    /**
     * To access the task date
     * @return Date of due date
     */
    public Date getTaskDueDate(){
       return dueDatePicker.getDate();
        
    }
    /**
     * To access the task due hour
     * @return int of due hour
     */
    public int getTaskDueHour(){
     return Integer.parseInt((String)dueHourPicker.getSelectedItem());
    }
    /**
     * To access the due minute
     * @return int of due minute
     */
    public int getTaskDueMin(){
    
        return Integer.parseInt((String)dueMinutePicker.getSelectedItem());
    }
    /**
     * To access the task importance
     * 
     * @return int of importance 
     */
    public int getTaskImportance(){
        return importanceSetter.getValue();
    }
    /**
     * To access the task type
     * @return  String of task type
     */
    public String getTaskType(){
        return (String) taskTypeSetter.getSelectedItem();
    }
    /**
     * To know whether or not the default button is pressed
     * @return a boolean true if the button is pressed, and false if it is not pressed
     */
    public boolean isDefaultButtonSelected(){
        return defaultButton.isSelected();
    }
    
    /**
     * To access the dialogue box for deleteTask
     * @return the delete task dialogue box
     */
    public javax.swing.JDialog getDeleteTaskDialogue(){
        return deleteTask;
    }
    
    /**
     * To access the dialogue box for searchTask
     * @return the search task dialogue box
     */
    public javax.swing.JDialog getSearchTaskDialogue(){
        return searchTask;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addTask;
    private javax.swing.JButton addTaskButton;
    private javax.swing.JButton clearHistory;
    private javax.swing.JButton clearPastButton;
    private javax.swing.JButton clearPastMonth;
    private javax.swing.JButton clearPastYear;
    private javax.swing.JDialog clearTasks;
    private javax.swing.JButton clearWeekButton;
    private javax.swing.JRadioButton defaultButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JDialog deleteTask;
    private com.toedter.calendar.JDateChooser dueDatePicker;
    private javax.swing.JComboBox dueHourPicker;
    private javax.swing.JComboBox dueMinutePicker;
    private javax.swing.JButton finalizeButton;
    private javax.swing.JSlider importanceSetter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton priorityListButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JDialog searchTask;
    private javax.swing.JButton searchWindowButton;
    private javax.swing.JButton sortDatesButton;
    private javax.swing.JButton submitDeleteButton;
    private javax.swing.JTextPane taskListDisplay;
    private javax.swing.JTextField taskNameDeleted;
    private javax.swing.JTextField taskNameField;
    private javax.swing.JTextField taskSearchBox;
    private javax.swing.JTextField taskSubjectField;
    private javax.swing.JComboBox taskTypeSetter;
    // End of variables declaration//GEN-END:variables
}
